{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","components/About.js","Pages/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","role","htmlFor","TexthtmlForm","console","log","useState","text","setText","heading","value","onChange","e","target","style","backgroundColor","color","rows","toUpperCase","showAlert","toLowerCase","replace","document","getElementById","select","navigator","clipboard","writeText","length","trim","split","Alerts","alert","message","About","myStyles","setMyStyles","btnText","setBtnText","protoTypes","PropTypes","string","isRequired","defaultProps","Error","textAlign","App","setMode","setAlert","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cd3ce132.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    const onClickHandle = ()=>{\r\n        props.toggleMode();\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">\r\n                    {props.title} \r\n                </Link>\r\n\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-bs-toggle=\"collapse\"\r\n                    data-bs-target=\"#navbarSupportedContent\"\r\n                    aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\" >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                            Home</Link>\r\n                        </li>\r\n\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">\r\n                            About</Link>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className={`form-check form-switch text-${props.mode===\"dark\"?\"light\":\"dark\"}`}>\r\n                    <input className=\"form-check-input\" onClick={onClickHandle} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.protoTypes = {title : PropTypes.string.isRequired};\r\nNavbar.defaultProps = {title : \"Enter titile here\"}; \r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function TexthtmlForm(props) {\r\n    console.log(\"Inside Home\", props)\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleOnChange=(e)=>{\r\n        setText(e.target.value);\r\n        // console.log(\"onclick fired\", text);\r\n    }\r\n\r\n    const onUpperCase=()=>{\r\n        setText(text.toUpperCase());\r\n        props.showAlert(\"Success: \", \"Converted to UpperCase \")\r\n    }\r\n\r\n    const onLowerCase=()=>{\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Success: \", \"Converted to LowerCase \")\r\n        \r\n    }\r\n\r\n    const onExtraSpace=()=>{\r\n        setText(text.replace(/  +/g, ' '))\r\n        props.showAlert(\"Success: \", \"Removed extra spaces \")\r\n\r\n    }\r\n\r\n    const onCopyText=()=>{\r\n        let text = document.getElementById(\"exampleFormControl\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Success: \", \"Text Copied\")\r\n\r\n    }\r\n    const onClearText=()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Success: \", \"Text cleared\")\r\n\r\n    }\r\n\r\n  return (\r\n    <> \r\n        <div className=\"form-group container text-center\" >\r\n            <h1 className=\"my-4 \" >{props.heading}</h1>\r\n\r\n            <textarea className=\"form-control my-5\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode===\"dark\"?\"black\":\"white\", color:props.mode===\"dark\"?\"white\":\"black\"}} \r\n            id=\"exampleFormControl\" rows=\"6\" ></textarea>\r\n            <button type=\"button\" className=\"btn btn-primary mt-4 mx-2 \" onClick={onUpperCase} >Convert Text to Uppercase</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-4 mx-2\" onClick={onLowerCase} >Convert Text to LowerCase</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-4 mx-2\" onClick={onExtraSpace} >Remove extra space</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-4 mx-2\" onClick={onCopyText} >Copy Text</button>\r\n            <button type=\"button\" className=\"btn btn-primary mt-4 mx-2\" onClick={onClearText} >Clear Text</button>\r\n\r\n        </div>\r\n        \r\n        <div className=\"container my-5 text-center\">\r\n            <h2 >Your text summary</h2>\r\n            <p><b>{text.length===0?\"0\":text.trim().replace(/  +/g, \" \").split(\" \").length} </b> words and <b>{text.length}</b> characters</p>\r\n\r\n            <p>{text.split(\" \").length / 200} min read </p>\r\n            <h2 >Preview your text</h2>\r\n            \r\n            <p>{text===\"\"?\"Enter text to preview\":text}</p>\r\n        </div>\r\n\r\n\r\n    </>\r\n  );\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n    // console.log(props)\r\n    return (\r\n        // props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n\r\n            <strong>{props.alert.type}</strong> {props.alert.message}\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function About(props) {\r\n    console.log(\"Inside About\", props);\r\n    const [myStyles, setMyStyles] = useState(\r\n        {\r\n            color:\"black\",\r\n            backgroundColor:\"white\"\r\n        }\r\n    )\r\n\r\n    const [btnText, setBtnText] = useState(\"Dark mode\")\r\n\r\n    const toggleBtn=()=>{\r\n            if(myStyles.color === \"black\"){\r\n                setMyStyles({\r\n                    color:\"white\",\r\n                    backgroundColor:\"rgba(36, 33, 38, 0.82)\"\r\n                })\r\n\r\n                setBtnText(\"Light Mode\")\r\n            }\r\n            else{\r\n                setMyStyles({\r\n                    color:\"black\",\r\n                    backgroundColor:\"white\"\r\n                })\r\n                setBtnText(\"Dark Mode\")\r\n            }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container my-4 \" >\r\n      <div className=\"accordion\" id=\"accordionExample\" >\r\n        <div className=\"accordion-item\" style={myStyles}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\" >\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"accordion-item\" style={myStyles}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" >\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"accordion-item\" style={myStyles}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"button\" className=\"btn btn-primary my-3\" onClick={toggleBtn} >{btnText}</button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div>\r\n            <h1 style={{textAlign:\"center\"}}>Opps! Something went wrong! </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import './App.css';\r\nimport { useState } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport Alerts from './components/Alerts';\r\nimport About from './components/About';\r\nimport Error from './Pages/Error';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (type, message)=>{\r\n    setAlert({\r\n      type:type,\r\n      message:message\r\n    })\r\n    setTimeout(()=>{\r\n      setAlert(null)\r\n    }, 1200)\r\n  }\r\n\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode===\"light\"){\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"black\";\r\n      document.body.style.color = \"white\";\r\n      showAlert(\"Success\", \": Dark Mode has been enabled\")\r\n    }else{\r\n      setMode(\"light\")\r\n      document.body.style.backgroundColor = \"white\";\r\n      document.body.style.color = \"black\";\r\n      showAlert(\"Success\", \": Light Mode has been enabled\")\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n          <Navbar title=\"WordConverter\" mode={mode} toggleMode={toggleMode} />\r\n          <Alerts alert={alert}/>\r\n      \r\n        <Switch>\r\n          <Route exact path=\"/\"> <TextForm heading = \"Enter your text below \" mode={mode} showAlert={showAlert}/> </Route>\r\n          <Route exact path=\"/about\"> <About/> </Route>\r\n          <Route><Error/></Route>\r\n        </Switch>\r\n      </Router>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}